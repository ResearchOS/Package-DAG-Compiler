{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Package-DAG-Compiler","text":"<p>The Directional Acyclic Graph (DAG) is a data structure (a type of Graph) that at its most fundamental level consists of nodes and directed (Directional) edges, and does not contain any loops (Acyclic). Typically, nodes are objects, and directed edges are the directional relationships between them, such as <code>gas -&gt; car</code>. It is the same in this package. Typically, edges are notated using some variant of <code>source -&gt; target</code> (equivalently, <code>(source, target)</code>), which can be read in one of two ways:</p> <ol> <li>The target depends on the source.</li> <li>The source feeds in to the target.</li> </ol> <p>The second, more source-centric interpretation guides the design philosophy of this package. In the context of a workflow orchestration tool, where data flows from a dataset to a final output, this makes more sense. In the DAG, nodes are Runnable functions and the edges are the Variables' data flowing between them, the edges look more like <code>Runnable -&gt; Variable</code> which can be read as \"data from this Runnable node flows into this output Variable\". Similarly, <code>Variable -&gt; Runnable</code> indicates that data flows from a Variable and is an input to a Runnable.</p> <p>In this package, edges carry no meaning or metadata, they simply define directional connectivity. All of the metadata is contained in the node properties.</p> <p>At a high level, there are two types of nodes: Runnables, and Variables. Runnables represent things that you run, generally a function that you can call or a script you can run. Categories of Runnables include Process, Stats, and Plot. More on those later. The other node type is Variables, which as you would expect help direct the flow of data. Runnable nodes can only directly connect to Variables, they cannot connect to each other directly. However, Variable nodes can connect to either a Runnable or another Variable. The edges between nodes, whether they be Runnable -&gt; Variable, Variable -&gt; Runnable, or Variable - Variable, represent the flow of data between steps in a data processing pipeline. There can only be one connection between an output variable node and an input variable node without triggering a split in the DAG. A split is exactly what it sounds like. An exact copy of the subgraph of nodes descended from the current  Runnable node is created, and attached to that same Runnable node.</p> <p>Further Reading: 1. Recommended package directory structure     - Can use a template to generate the TOML files and directory structure 2. Various types of TOML files and their formats     - pyproject, index, runnables, bridges 3. How the DAG is structured     - Node naming conventions, and how it relates to TOML     - Node metadata. Which metadata changes the hash?     - Polyfurcations. What are they, when do they occur, why are they good, and what are the implementation details? 3. How to use this package     - Example project     - Templates     - Documentation per function     - Output is NetworkX graph</p>"},{"location":"package_design/","title":"Package Design","text":"<p>This is where I'll detail the high-level (and probably some lower level) implementation details. Before diving in, I want to cover some relevant terminology.</p>"},{"location":"package_design/#highest-level-summary","title":"Highest Level Summary","text":"<p>At the highest level, this package does the following:</p>"},{"location":"package_design/#1-reads-toml-files-for-a-given-project","title":"1. Reads TOML files for a given project.","text":"<p>Finds all listed dependencies recursively.</p>"},{"location":"package_design/#2-constructs-a-directional-acyclic-graph-dag-from-those-toml-files","title":"2. Constructs a Directional Acyclic Graph (DAG) from those TOML files","text":"<p>Using the data from the TOML files, a DAG is constructed that defines a data processing pipeline, where data flows from source to target nodes.</p>"},{"location":"publishing_packages/","title":"Publishing Packages","text":"<p>You've created a set of TOML files, you've compiled them to a DAG, maybe you've even bridged your package with others to create something even more powerful, and you're ready to share your package with the world. </p> <p>There are multiple ways to share your package with the world.</p>"},{"location":"publishing_packages/#1-pypi","title":"1. PyPI","text":"<p>The Python Packaging Authority maintains the Python Packaging Index (PyPI), which is where the majority of Python packages reside. Packages in PyPI can be easily installed using <code>pip install</code>.</p>"},{"location":"publishing_packages/#2-github-or-other-online-version-control","title":"2. GitHub (or Other Online Version Control)","text":"<p>If your package is publicly visible and hosted in an online version control platform such as GitHub or another service, you can simply leave it there! Others can pip install directly from your GitHub repository.</p> <p>Todo</p>"},{"location":"terms/","title":"Dictionary","text":"<p>Throughout the dictionary and the docs, you'll see notation for file and folder paths that may include dollar signs <code>$</code>. Whatever comes after this symbol is intended to be a dynamic variable, e.g. <code>$project_folder</code> will be replaced with the actual folder path for your project.</p>"},{"location":"terms/#dag","title":"DAG","text":"<p>A Directional Acyclic Graph (DAG) consisting of nodes and edges. Nodes can be Runnables or Variables, and edges represent the connections between nodes.</p>"},{"location":"terms/#indextoml","title":"index.toml","text":"<p>Recommended to be located at <code>$project_folder/src/$project_name/index.toml</code>. This file contains all of the file paths to all of the files that comprise this package. For maximum flexibility, the only requirement as to the structure of this file is that it consist only of dictionaries with any degree of nesting, where each key is whatever string the user wants, and the values are either a subdictionary, or an absolute file path. No relative file paths or other strings, no numbers, or lists are allowed outside of dictionaries.</p>"},{"location":"terms/#pyprojecttoml","title":"pyproject.toml","text":"<p>Recommended to be located at the root of your project folder, <code>pyproject.toml</code> is a type of text file that is Python's default way of providing the metadata needed to share Python packages. This is the only Python-standard .toml file, the rest are defined by me for the purposes of compiling a DAG from a TOML-based modular package format.</p>"},{"location":"terms/#runnable","title":"Runnable","text":""},{"location":"terms/#variable","title":"Variable","text":""},{"location":"terms/#runnable-process","title":"Runnable: Process","text":""},{"location":"terms/#runnable-plot","title":"Runnable: Plot","text":""},{"location":"terms/#runnable-stats","title":"Runnable: Stats","text":""}]}